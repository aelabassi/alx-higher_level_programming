============================
How to use 3-say_my_name
============================

This module have a function that prints the full name of a living being

==========
Usage
==========
``` 3-say_my_name(first_name, last_name="") ```` prints a string; concatinating first_name and last_name



Testing with ordernairy string
============================
::

    >>> say_my_name = __import__("3-say_my_name").say_my_name
    >>> say_my_name("John", "Smith")
    My name is John Smith

::

    >>> say_my_name("Walter", "White")
    My name is Walter White
    >>> say_my_name("Bob")
    My name is Bob 

::

    >>> say_my_name("", "Reacher")
    My name is  Reacher

Special cases
=============
::

    >>> say_my_name(12, "Smith")
    Traceback (most recent call last):
    TypeError: first_name must be a string

::

    >>> say_my_name("Reacher", 12)
    Traceback (most recent call last):
    TypeError: last_name must be a string
    
::

    >>> say_my_name(None, "Sukuna")
    Traceback (most recent call last):
    TypeError: first_name must be a string

::

    >>> say_my_name("gojo", None)
    Traceback (most recent call last):
    TypeError: last_name must be a string

::

    >>> say_my_name(2.0, 3.0)
    Traceback (most recent call last):
    TypeError: first_name must be a string

::

    >>> say_my_name(2.0, "Sarada")
    Traceback (most recent call last):
    TypeError: first_name must be a string

::

    >>> say_my_name("Uchiha", 2.9)
    Traceback (most recent call last):
    TypeError: last_name must be a string